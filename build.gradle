buildscript {
	ext {
		springBootVersion = '3.3.3'
		dependencyManagementVersion = '1.1.6'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.github.node-gradle.node' version '3.4.0'	// 이거 추가
}

group = 'com.urambank'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
	options.compilerArgs << '-parameters'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	implementation 'commons-codec:commons-codec:1.5'
	implementation 'com.auth0:java-jwt:3.13.0'
	implementation 'net.nurigo:sdk:4.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

node {
	version = '20.16.0'
	npmVersion = '10.9.0'
	download = true
	nodeModulesDir = file("${projectDir}/src/main/resources/static")
}

task npmInstallFrontend(type: NpmTask) {
	workingDir = file("${projectDir}/front-end")
	args = ["install"]
}

task appNpmBuild(type: NpmTask) {
	dependsOn npmInstallFrontend
	workingDir = file("${projectDir}/front-end")
	args = ["run", "build"]
}

task copyWebApp(type: Copy) {
	from "${projectDir}/src/main/resources/static"
	into "${projectDir}/build/resources/main/static/."
}
copyWebApp.dependsOn appNpmBuild

task runReactServer(type: NpmTask) {
	workingDir = file("${projectDir}/front-end")
	args = ["run", "start"]
}

bootRun {
	dependsOn runReactServer
}

tasks.named('test') {
	useJUnitPlatform()
}
